// { Driver Code Starts
// Initial Template for Java

import java.util.*;
import java.io.*;

class LongestPalinSubstring {
    // Driver program to test above function
    public static void main(String[] args) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int tc = Integer.parseInt(br.readLine().trim());
        while (tc-- > 0) {
            String str = br.readLine().trim();
            Solution sln = new Solution();
            System.out.println(sln.longestPalindrome(str));
        }
    }
}// } Driver Code Ends


// User function Template for Java

class Solution {
    // complete this function
    public String longestPalindrome(String S) {
        ArrayList<String> aList = new ArrayList<>();
		ArrayList<String> palindromeList = new ArrayList<>();
		String lonString = "";
		for (int i = 0; i < S.length(); i++) {
			for (int j = i+1; j < S.length(); j++) {
				aList.add(S.substring(i,j+1));
			}
		}
		for(String s : aList) {
			if(checkPalindrome(s)) {
				palindromeList.add(s);
			}
		}
		if(palindromeList.size() == 0) {
			return S.charAt(0)+"";
		}
		int maxLen = 0;
		for(String s : palindromeList) {
			maxLen = Math.max(maxLen, s.length());
		}
		for(String s : palindromeList) {
			if(s.length() == maxLen) {
				lonString = s;
				break;
			}
		}
		return lonString;
    }
    public boolean checkPalindrome(String str) {
		boolean isPalindrome = false;
		StringBuilder stringBuilder = new StringBuilder(str);
		String revString = stringBuilder.reverse().toString();
		if(str.equals(revString)) {
			isPalindrome = true;
		}
		return isPalindrome;
	}
}
