O(n^2) Solution -
class Solution {
    public int majorityElement(int[] nums) {
       int count = 0,maj = 0,index = 0;
		for (int i = 0; i < nums.length; i++) {
			count = 0;
			for (int j = 0; j < nums.length; j++) {
				if(nums[i] == nums[j]) {
					count++;
					index = i;
				}
			}
			if(count > (nums.length)/2) {
				return nums[i];
			}
		}
		
		return -1;
    }
}


O(n) Solution using HashMap - 
if(nums.length == 1) {
			return nums[0];
		}
		
		HashMap<Integer, Integer> hMap = new HashMap<>();
		for(int i: nums) {
			if(hMap.containsKey(i) && hMap.get(i)+1 > (nums.length)/2) {
				return i;
			}
			else {
				hMap.put(i, hMap.getOrDefault(i,0)+1);
			}
		}
		return -1;
